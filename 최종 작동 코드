#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import cv2, time, logging                           # OpenCV, 시간, 로그 라이브러리
from datetime import datetime, timedelta            # 시간 계산용 모듈

# ---------------------------
# 1) 로깅 설정
# ---------------------------
logging.basicConfig(
    level=logging.INFO,                             # INFO 이상 로그 출력
    format="%(asctime)s [%(levelname)s] %(message)s",# 로그 포맷(시간,레벨,메시지)
    handlers=[logging.StreamHandler(),              # 콘솔 출력
              logging.FileHandler("guard.log")]     # guard.log 파일에도 기록
)
log = logging.getLogger("Guard")                    # 로거 인스턴스 생성

# ---------------------------
# 2) 설정값
# ---------------------------
QR_WHITELIST = {"EMP-DOOR-A-2025", "VISITOR-1234"}  # 허용된 QR 목록
QR_WINDOW_SEC = 20                                  # 정지 후 QR 대기 시간(초)
NEAR_AREA_RATIO = 0.08                              # 사람 박스 면적 비율(2m 근접 기준)
SHOW_PREVIEW = False                                # 디버그용 카메라 미리보기 여부

# ---------------------------
# 3) 감지기 초기화
# ---------------------------
hog = cv2.HOGDescriptor()                           # HOG 기반 사람 검출기
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())
qr = cv2.QRCodeDetector()                           # OpenCV QR 코드 검출기

# ---------------------------
# 4) 사람/QR 인식 함수
# ---------------------------
def detect_person_and_near(frame):                  # 프레임에서 사람 탐지 + 근접 판정
    h, w = frame.shape[:2]                          # 프레임 크기
    rects, _ = hog.detectMultiScale(                # 사람 검출 실행
        frame, winStride=(8,8), padding=(8,8), scale=1.05)
    if len(rects) == 0:                             # 사람이 없으면 False 반환
        return False, False
    max_ratio = 0.0
    for (x, y, rw, rh) in rects:                    # 검출된 사람 박스마다
        area_ratio = (rw * rh) / float(w * h)       # 박스 면적 비율 계산
        max_ratio = max(max_ratio, area_ratio)      # 가장 큰 비율 저장
    is_near = (max_ratio >= NEAR_AREA_RATIO)        # 근접 여부 판정
    return True, is_near

def read_qr_text(frame):                            # QR 코드 읽기
    data, pts, _ = qr.detectAndDecode(frame)        # QR 디코딩
    if pts is not None and data:                    # QR 검출 성공 시
        return data.strip()                         # 텍스트 반환
    return None                                     # 실패 시 None 반환

# ---------------------------
# 5) 메인 로직(상태 기계)
# ---------------------------
def main():
    cap = cv2.VideoCapture(0)                       # 카메라 열기(0번 장치)
    cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)          # 해상도 설정(640x480)
    cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
    if not cap.isOpened():                          # 카메라 열기 실패 시 종료
        log.error("Camera open failed"); return

    state = "PATROL"                                # 초기 상태 = 순찰
    qr_deadline = None                              # QR 대기 종료 시각

    log.info("System started. NEAR=%.2f, QR_WINDOW=%ds",
             NEAR_AREA_RATIO, QR_WINDOW_SEC)

    try:
        while True:                                 # 무한 루프
            ok, frame = cap.read()                  # 카메라 프레임 읽기
            if not ok:                              # 실패 시 잠깐 쉬고 continue
                time.sleep(0.02); continue

            if state == "PATROL":                   # 순찰 상태
                person, near = detect_person_and_near(frame) # 사람+근접 여부
                if person and near:                 # 근접한 사람 발견
                    log.info("PERSON_DETECTED -> STOP & WAIT_QR(%ds)", QR_WINDOW_SEC)
                    state = "WAIT_QR"               # 상태 전환: QR 대기
                    qr_deadline = datetime.now() + timedelta(seconds=QR_WINDOW_SEC)

            elif state == "WAIT_QR":                # QR 대기 상태
                txt = read_qr_text(frame)           # QR 읽기 시도
                if txt:                             # QR 검출 성공
                    if txt in QR_WHITELIST:         # 허용 QR
                        log.info("QR_ACCEPTED: %s -> RESUME_PATROL", txt)
                        state = "PATROL"            # 순찰로 복귀
                    else:                           # 비허용 QR
                        log.warning("QR_REJECTED: %s -> ALERT(LOG)", txt)
                        state = "PATROL"            # 순찰로 복귀
                elif datetime.now() >= qr_deadline: # 대기시간 초과
                    log.warning("QR_TIMEOUT_%ds -> ALERT(LOG)", QR_WINDOW_SEC)
                    state = "PATROL"                # 순찰로 복귀

            if SHOW_PREVIEW:                        # 디버그 모드
                cv2.imshow("Guard", frame)          # 카메라 창 띄우기
                if (cv2.waitKey(1) & 0xFF) == 27:   # ESC 누르면 종료
                    break

            time.sleep(0.02)                        # CPU 사용 줄이기

    finally:
        cap.release()                               # 카메라 닫기
        cv2.destroyAllWindows()                     # OpenCV 창 닫기
        log.info("Shutdown")                        # 종료 로그 출력

if __name__ == "__main__":                          # 메인 실행부
    main()
